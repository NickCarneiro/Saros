// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BinaryPacketProto.proto

package de.fu_berlin.inf.dpp.net.internal;

@SuppressWarnings("all")
public final class BinaryPacketProto {
    private BinaryPacketProto() {
    }

    public static void registerAllExtensions(
        com.google.protobuf.ExtensionRegistry registry) {
    }

    public static final class BinaryPacket extends
        com.google.protobuf.GeneratedMessage {
        // Use BinaryPacket.newBuilder() to construct.
        private BinaryPacket() {
            initFields();
        }

        private BinaryPacket(boolean noInit) {
        }

        private static final BinaryPacket defaultInstance;

        public static BinaryPacket getDefaultInstance() {
            return defaultInstance;
        }

        public BinaryPacket getDefaultInstanceForType() {
            return defaultInstance;
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.internal_static_de_fu_berlin_inf_dpp_net_jingle_protocol_BinaryPacket_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.internal_static_de_fu_berlin_inf_dpp_net_jingle_protocol_BinaryPacket_fieldAccessorTable;
        }

        public enum PacketType implements
            com.google.protobuf.ProtocolMessageEnum {
            REJECT(0, 0), CANCEL(1, 1), FINISHED(2, 2), SHUTDOWN(3, 3), TRANSFERDESCRIPTION(
                4, 4), DATA(5, 5), ;

            public final int getNumber() {
                return value;
            }

            public static PacketType valueOf(int value) {
                switch (value) {
                case 0:
                    return REJECT;
                case 1:
                    return CANCEL;
                case 2:
                    return FINISHED;
                case 3:
                    return SHUTDOWN;
                case 4:
                    return TRANSFERDESCRIPTION;
                case 5:
                    return DATA;
                default:
                    return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<PacketType> internalGetValueMap() {
                return internalValueMap;
            }

            private static com.google.protobuf.Internal.EnumLiteMap<PacketType> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<PacketType>() {
                public PacketType findValueByNumber(int number) {
                    return PacketType.valueOf(number);
                }
            };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }

            public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
                return getDescriptor();
            }

            public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
                return de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket
                    .getDescriptor().getEnumTypes().get(0);
            }

            private static final PacketType[] VALUES = { REJECT, CANCEL,
                FINISHED, SHUTDOWN, TRANSFERDESCRIPTION, DATA, };

            public static PacketType valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private PacketType(int index, int value) {
                this.index = index;
                this.value = value;
            }

            static {
                de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto
                    .getDescriptor();
            }

            // @@protoc_insertion_point(enum_scope:de.fu_berlin.inf.dpp.net.jingle.protocol.BinaryPacket.PacketType)
        }

        // required
        // .de.fu_berlin.inf.dpp.net.jingle.protocol.BinaryPacket.PacketType
        // type = 1;
        public static final int TYPE_FIELD_NUMBER = 1;
        private boolean hasType;
        private de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket.PacketType type_;

        public boolean hasType() {
            return hasType;
        }

        public de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket.PacketType getType() {
            return type_;
        }

        // required int32 remaining = 2;
        public static final int REMAINING_FIELD_NUMBER = 2;
        private boolean hasRemaining;
        private int remaining_ = 0;

        public boolean hasRemaining() {
            return hasRemaining;
        }

        public int getRemaining() {
            return remaining_;
        }

        // required int32 objectid = 3;
        public static final int OBJECTID_FIELD_NUMBER = 3;
        private boolean hasObjectid;
        private int objectid_ = 0;

        public boolean hasObjectid() {
            return hasObjectid;
        }

        public int getObjectid() {
            return objectid_;
        }

        // required int32 size = 4;
        public static final int SIZE_FIELD_NUMBER = 4;
        private boolean hasSize;
        private int size_ = 0;

        public boolean hasSize() {
            return hasSize;
        }

        public int getSize() {
            return size_;
        }

        // required bytes data = 5;
        public static final int DATA_FIELD_NUMBER = 5;
        private boolean hasData;
        private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;

        public boolean hasData() {
            return hasData;
        }

        public com.google.protobuf.ByteString getData() {
            return data_;
        }

        private void initFields() {
            type_ = de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket.PacketType.REJECT;
        }

        public final boolean isInitialized() {
            if (!hasType)
                return false;
            if (!hasRemaining)
                return false;
            if (!hasObjectid)
                return false;
            if (!hasSize)
                return false;
            if (!hasData)
                return false;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
            getSerializedSize();
            if (hasType()) {
                output.writeEnum(1, getType().getNumber());
            }
            if (hasRemaining()) {
                output.writeInt32(2, getRemaining());
            }
            if (hasObjectid()) {
                output.writeInt32(3, getObjectid());
            }
            if (hasSize()) {
                output.writeInt32(4, getSize());
            }
            if (hasData()) {
                output.writeBytes(5, getData());
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (hasType()) {
                size += com.google.protobuf.CodedOutputStream.computeEnumSize(
                    1, getType().getNumber());
            }
            if (hasRemaining()) {
                size += com.google.protobuf.CodedOutputStream.computeInt32Size(
                    2, getRemaining());
            }
            if (hasObjectid()) {
                size += com.google.protobuf.CodedOutputStream.computeInt32Size(
                    3, getObjectid());
            }
            if (hasSize()) {
                size += com.google.protobuf.CodedOutputStream.computeInt32Size(
                    4, getSize());
            }
            if (hasData()) {
                size += com.google.protobuf.CodedOutputStream.computeBytesSize(
                    5, getData());
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        public static de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                .buildParsed();
        }

        public static de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket parseFrom(
            byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                .buildParsed();
        }

        public static de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket parseFrom(
            java.io.InputStream input) throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                .buildParsed();
        }

        public static de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket parseDelimitedFrom(
            java.io.InputStream input) throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                .buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(
            de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder> {
            private de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket result;

            // Construct using
            // de.fu_berlin.inf.dpp.net.jingle.protocol.BinaryPacketProto.BinaryPacket.newBuilder()
            private Builder() {
            }

            private static Builder create() {
                Builder builder = new Builder();
                builder.result = new de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket();
                return builder;
            }

            protected de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket internalGetResult() {
                return result;
            }

            public Builder clear() {
                if (result == null) {
                    throw new IllegalStateException(
                        "Cannot call clear() after build().");
                }
                result = new de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(result);
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket
                    .getDescriptor();
            }

            public de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket getDefaultInstanceForType() {
                return de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket
                    .getDefaultInstance();
            }

            public boolean isInitialized() {
                return result.isInitialized();
            }

            public de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket build() {
                if (result != null && !isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return buildPartial();
            }

            private de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket buildParsed()
                throws com.google.protobuf.InvalidProtocolBufferException {
                if (!isInitialized()) {
                    throw newUninitializedMessageException(result)
                        .asInvalidProtocolBufferException();
                }
                return buildPartial();
            }

            public de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket buildPartial() {
                if (result == null) {
                    throw new IllegalStateException(
                        "build() has already been called on this Builder.");
                }
                de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket returnMe = result;
                result = null;
                return returnMe;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket) {
                    return mergeFrom((de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(
                de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket other) {
                if (other == de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket
                    .getDefaultInstance())
                    return this;
                if (other.hasType()) {
                    setType(other.getType());
                }
                if (other.hasRemaining()) {
                    setRemaining(other.getRemaining());
                }
                if (other.hasObjectid()) {
                    setObjectid(other.getObjectid());
                }
                if (other.hasSize()) {
                    setSize(other.getSize());
                }
                if (other.hasData()) {
                    setData(other.getData());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
                com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet
                    .newBuilder(this.getUnknownFields());
                while (true) {
                    int tag = input.readTag();
                    switch (tag) {
                    case 0:
                        this.setUnknownFields(unknownFields.build());
                        return this;
                    default: {
                        if (!parseUnknownField(input, unknownFields,
                            extensionRegistry, tag)) {
                            this.setUnknownFields(unknownFields.build());
                            return this;
                        }
                        break;
                    }
                    case 8: {
                        int rawValue = input.readEnum();
                        de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket.PacketType value = de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket.PacketType
                            .valueOf(rawValue);
                        if (value == null) {
                            unknownFields.mergeVarintField(1, rawValue);
                        } else {
                            setType(value);
                        }
                        break;
                    }
                    case 16: {
                        setRemaining(input.readInt32());
                        break;
                    }
                    case 24: {
                        setObjectid(input.readInt32());
                        break;
                    }
                    case 32: {
                        setSize(input.readInt32());
                        break;
                    }
                    case 42: {
                        setData(input.readBytes());
                        break;
                    }
                    }
                }
            }

            // required
            // .de.fu_berlin.inf.dpp.net.jingle.protocol.BinaryPacket.PacketType
            // type = 1;
            public boolean hasType() {
                return result.hasType();
            }

            public de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket.PacketType getType() {
                return result.getType();
            }

            public Builder setType(
                de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket.PacketType value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                result.hasType = true;
                result.type_ = value;
                return this;
            }

            public Builder clearType() {
                result.hasType = false;
                result.type_ = de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket.PacketType.REJECT;
                return this;
            }

            // required int32 remaining = 2;
            public boolean hasRemaining() {
                return result.hasRemaining();
            }

            public int getRemaining() {
                return result.getRemaining();
            }

            public Builder setRemaining(int value) {
                result.hasRemaining = true;
                result.remaining_ = value;
                return this;
            }

            public Builder clearRemaining() {
                result.hasRemaining = false;
                result.remaining_ = 0;
                return this;
            }

            // required int32 objectid = 3;
            public boolean hasObjectid() {
                return result.hasObjectid();
            }

            public int getObjectid() {
                return result.getObjectid();
            }

            public Builder setObjectid(int value) {
                result.hasObjectid = true;
                result.objectid_ = value;
                return this;
            }

            public Builder clearObjectid() {
                result.hasObjectid = false;
                result.objectid_ = 0;
                return this;
            }

            // required int32 size = 4;
            public boolean hasSize() {
                return result.hasSize();
            }

            public int getSize() {
                return result.getSize();
            }

            public Builder setSize(int value) {
                result.hasSize = true;
                result.size_ = value;
                return this;
            }

            public Builder clearSize() {
                result.hasSize = false;
                result.size_ = 0;
                return this;
            }

            // required bytes data = 5;
            public boolean hasData() {
                return result.hasData();
            }

            public com.google.protobuf.ByteString getData() {
                return result.getData();
            }

            public Builder setData(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                result.hasData = true;
                result.data_ = value;
                return this;
            }

            public Builder clearData() {
                result.hasData = false;
                result.data_ = getDefaultInstance().getData();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:de.fu_berlin.inf.dpp.net.jingle.protocol.BinaryPacket)
        }

        static {
            defaultInstance = new BinaryPacket(true);
            de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto
                .internalForceInit();
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:de.fu_berlin.inf.dpp.net.jingle.protocol.BinaryPacket)
    }

    private static com.google.protobuf.Descriptors.Descriptor internal_static_de_fu_berlin_inf_dpp_net_jingle_protocol_BinaryPacket_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_de_fu_berlin_inf_dpp_net_jingle_protocol_BinaryPacket_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor descriptor;
    static {
        java.lang.String[] descriptorData = { "\n\027BinaryPacketProto.proto\022(de.fu_berlin."
            + "inf.dpp.net.jingle.protocol\"\205\002\n\014BinaryPa"
            + "cket\022O\n\004type\030\001 \002(\0162A.de.fu_berlin.inf.dp"
            + "p.net.jingle.protocol.BinaryPacket.Packe"
            + "tType\022\021\n\tremaining\030\002 \002(\005\022\020\n\010objectid\030\003 \002"
            + "(\005\022\014\n\004size\030\004 \002(\005\022\014\n\004data\030\005 \002(\014\"c\n\nPacket"
            + "Type\022\n\n\006REJECT\020\000\022\n\n\006CANCEL\020\001\022\014\n\010FINISHED"
            + "\020\002\022\014\n\010SHUTDOWN\020\003\022\027\n\023TRANSFERDESCRIPTION\020"
            + "\004\022\010\n\004DATA\020\005" };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
            public com.google.protobuf.ExtensionRegistry assignDescriptors(
                com.google.protobuf.Descriptors.FileDescriptor root) {
                descriptor = root;
                internal_static_de_fu_berlin_inf_dpp_net_jingle_protocol_BinaryPacket_descriptor = getDescriptor()
                    .getMessageTypes().get(0);
                internal_static_de_fu_berlin_inf_dpp_net_jingle_protocol_BinaryPacket_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                    internal_static_de_fu_berlin_inf_dpp_net_jingle_protocol_BinaryPacket_descriptor,
                    new java.lang.String[] { "Type", "Remaining", "Objectid",
                        "Size", "Data", },
                    de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket.class,
                    de.fu_berlin.inf.dpp.net.internal.BinaryPacketProto.BinaryPacket.Builder.class);
                return null;
            }
        };
        com.google.protobuf.Descriptors.FileDescriptor
            .internalBuildGeneratedFileFrom(descriptorData,
                new com.google.protobuf.Descriptors.FileDescriptor[] {},
                assigner);
    }

    public static void internalForceInit() {
    }

    // @@protoc_insertion_point(outer_class_scope)
}
